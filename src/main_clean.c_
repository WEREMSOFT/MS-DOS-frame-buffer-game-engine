#include <GLFW/glfw3.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <stdbool.h>
#include <soloud_c.h>
#define INITIAL_LEVEL GAME_STATE_CLICK_TO_START
#define UR_SCREEN_WIDTH 320
#define UR_SCREEN_HEIGHT 240

#define __STATIC_ALLOC_IMPLEMENTATION__
#include "program/core/stackAllocator/staticAlloc.h"

#define UR_MALLOC allocStatic
#define UR_REALLOC reallocStatic
#define UR_FREE freeStatic

void urPutPixel(int x, int y, unsigned char r, unsigned char g, unsigned char b);


#define UR_PUT_PIXEL urPutPixel
#include "universal_renderer.h"

#define Color URColor
#define PointI URPointI
#define PointF URPointF

#include "program/core/utils/utils.h"
#include "program/core/input/keyboard.h"

ImageData globalImgData;

void urPutPixel(int x, int y, unsigned char r, unsigned char g, unsigned char b)
{
	int position = (x + y * UR_SCREEN_WIDTH) % globalImgData.bufferSize;
	globalImgData.data[position] = (URColor){r, g, b};
}


#ifdef __EMSCRIPTEN__
#include <emscripten/emscripten.h>
#include <emscripten/html5.h>
#endif

#define ARRAY_MALLOC allocStatic
#define ARRAY_REALLOC reallocStatic
#define __UNIVERSAL_ARRAY_IMPLEMENTATION__
#include "program/core/array/array.h"

#define STBI_MALLOC(sz) allocStatic(sz)
#define STBI_REALLOC(p, newsz) reallocStatic(p, newsz)
#define STBI_FREE(p) freeStatic(p)


#include <soloud_c.h>

typedef enum
{
	SFX_SELECT,
	SFX_SHOOT_HERO,
	SFX_ENEMY_ESCAPED,
	SFX_BLIP,
	SFX_HERO_JUMP,
	SFX_HERO_HURT,
	SFX_COUNT
} GameSFX;

typedef enum
{
	SPEECH_JUMP_THE_ROCKS,
	SPEECH_SHOOT_THE_BAD_GUYS,
	SPEECH_NOOO,
	SPEECH_GAME_OVER,
	SPEECH_COUNT
} GameSpeech;

typedef struct
{
	Soloud *soloud;
	Speech *speechs[SPEECH_COUNT];
	Sfxr *sfx[SFX_COUNT];
} Sound;

typedef enum
{
	ASSET_NONE,
	ASSET_BACKGROUND,
	ASSET_COUNT
} Assets;

struct GameState;

typedef enum
{
	GAME_STATE_CLICK_TO_START,
	GAME_STATE_COUNT
} GameStateEnum;

typedef struct GameState
{
	struct GameState *_self;
	Graphics graphics;
	URSprite sprites[ASSET_COUNT];
	Sound sound;
	float deltaTime;
	bool shouldQuit;
	bool shouldStop;
	GameStateEnum gameStateEnum;
} GameState;

GameState gameStateCheckExitConditions(GameState _this)
{
	if (glfwWindowShouldClose(_this.graphics.window))
	{
		_this.shouldQuit = true;
		return _this;
	}

	_this.shouldQuit = isKeyJustPressed(_this.graphics.window, GLFW_KEY_ESCAPE);
	if (isKeyJustPressed(_this.graphics.window, GLFW_KEY_ENTER))
		_this.shouldStop = true;

	return _this;
}

void swapBuffersPrintFPSPollEvents(Graphics graphics, float deltaTime)
{
	urPrintFPS(deltaTime);
	graphicsSwapBuffers(graphics);
	glfwPollEvents();
}

Sound soundCreate()
{
	Sound this = {0};

	this.soloud = Soloud_create();
	for (int i = 0; i < SPEECH_COUNT; i++)
	{
		this.speechs[i] = Speech_create();
	}

	for (int i = 0; i < SFX_COUNT; i++)
	{
		this.sfx[i] = Sfxr_create();
	}

	Speech_setText(this.speechs[SPEECH_JUMP_THE_ROCKS], "Jump the rocks!");
	Speech_setText(this.speechs[SPEECH_SHOOT_THE_BAD_GUYS], "Shoot the bad guys!");
	Speech_setText(this.speechs[SPEECH_NOOO], "O!");
	Sfxr_loadPreset(this.sfx[SFX_BLIP], SFXR_BLIP, 3247);
	Sfxr_loadPreset(this.sfx[SFX_SELECT], SFXR_POWERUP, 3247);
	Sfxr_loadPreset(this.sfx[SFX_SHOOT_HERO], SFXR_EXPLOSION, 3247);
	Sfxr_loadPreset(this.sfx[SFX_ENEMY_ESCAPED], SFXR_HURT, 3247);
	Sfxr_loadPreset(this.sfx[SFX_HERO_JUMP], SFXR_JUMP, 3247);
	Sfxr_loadPreset(this.sfx[SFX_HERO_HURT], SFXR_HURT, 3247);

	Soloud_initEx(
		this.soloud,
		SOLOUD_CLIP_ROUNDOFF | SOLOUD_ENABLE_VISUALIZATION,
		SOLOUD_AUTO, SOLOUD_AUTO, SOLOUD_AUTO, 2);

	Soloud_setGlobalVolume(this.soloud, 4);

	return this;
}

void soundPlaySfx(Sound this, GameSFX id)
{
	Soloud_play(this.soloud, this.sfx[id]);
}

void soundPlaySpeech(Sound this, GameSpeech id)
{
	Soloud_play(this.soloud, this.speechs[id]);
}

void soundDestroy(Sound this)
{
	for (int i = 0; i < SPEECH_COUNT; i++)
	{
		Speech_destroy(this.speechs[i]);
	}

	for (int i = 0; i < SFX_COUNT; i++)
	{
		Sfxr_destroy(this.sfx[i]);
	}

	Soloud_deinit(this.soloud);
	Soloud_destroy(this.soloud);
}

void loadAssets(URSprite *_this)
{

	_this[ASSET_BACKGROUND] = urSpriteCreate("assets/background.bmp");

#define ASSET_PATH "assets/level2/"
	// _this[ASSET_LEVEL2_BACKGROUND] = urSpriteCreate(ASSET_PATH "background.bmp");

#undef ASSET_PATH
}

GameState gameStateClickToStart(GameState _this)
{
	graphicsClear(_this.graphics.imageData);
	URColor static textColor = {255, 255, 255};
	char *clickToStart = "click to start";

	static int gameColor = 0;
	static float elapsedTime = 0;

	elapsedTime += getDeltaTime();

	if (elapsedTime > 0.0001)
	{
		elapsedTime = 0;
		gameColor = (gameColor + 1) % 3;
		switch (gameColor)
		{
		case 0:
			textColor.r = 255;
			textColor.g = 255;
			textColor.b = 255;
			break;
		case 1:
			textColor.r = 0;
			textColor.g = 0;
			textColor.b = 255;
			break;
		case 2:
			textColor.r = 255;
			textColor.g = 0;
			textColor.b = 0;
			break;
		}
	}

	urPrintString((URPointI){120, 120}, clickToStart, textColor);
	if (glfwGetMouseButton(_this.graphics.window, GLFW_MOUSE_BUTTON_1))
		_this.shouldStop = true;
	return _this;
}

GameState gameMainLoop(GameState gameState)
{
	globalImgData = gameState.graphics.imageData;
	gameState.deltaTime = getDeltaTime();
	gameState = gameStateCheckExitConditions(gameState);
	switch (gameState.gameStateEnum)
	{
	case GAME_STATE_CLICK_TO_START:
		gameState = gameStateClickToStart(gameState);
		break;
	default:
		gameState.shouldQuit = true;
	}
	swapBuffersPrintFPSPollEvents(gameState.graphics, gameState.deltaTime);
	if (gameState.shouldStop)
	{
		gameState.shouldStop = false;
		gameState.gameStateEnum++;
	}

	return gameState;
}

#ifdef __EMSCRIPTEN__
GameState gameState = {0};

void emscriptenLoopHandler()
{
	gameState = gameMainLoop(gameState);
}
#endif

int main(void)
{
	// Init memory, load assets and general initialization
	staticAllocatorInit(2878340 * 2);
	initDeltaTime();

#ifndef __EMSCRIPTEN__
	GameState gameState = {0};
#endif

	gameState._self = &gameState;
	gameState.graphics = graphicsCreate(320, 240, false);
	loadAssets(gameState.sprites);
	
#ifdef INITIAL_LEVEL
	gameState.gameStateEnum = INITIAL_LEVEL;
#endif

#ifdef __EMSCRIPTEN__
	emscripten_set_main_loop(emscriptenLoopHandler, 0, false);
#else

	while (!gameState.shouldStop && !gameState.shouldQuit)
		gameState = gameMainLoop(gameState);

Cleanup:
	graphicsDestroy(gameState.graphics);
	staticAllocatorDestroy();
	return 0;
#endif
}
